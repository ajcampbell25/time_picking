
''' SEGY Binary, Text and Trace header routines
'''

def headers_frame(self,root):
        ''' Set up and plot a toplevel window for printing
        the text header, binary (ebcdic) header and
        trace headers

        '''
        import tkinter as tk
        from tkinter import ttk
        from timepick import headers
    
        # create a toplevel window (pop-out) to print headers
        # then add a text widget to the window
        self.hedwindow = tk.Toplevel(root)
        self.hedwindow.wm_title("Header Listing")# double quotations!
 
        # this section is necessary to make scrollbars work
        # scrollbars need to be attached to a re-sizable Frame       
        self.printframe = ttk.Frame(self.hedwindow)
        self.printframe.pack(fill="both", expand=True)            
        self.printframe.rowconfigure(0, weight=1)
        self.printframe.columnconfigure(0, weight=1)# this column will expand
        
        file_hed = tk.Text(self.printframe)

        file_hed.grid(row = 0, column = 0, sticky='nsew')# or tk.HORIZONTAL
        file_hed.columnconfigure(0,  weight=1)
        file_hed.rowconfigure(0,  weight=1)
        file_hed.config(font=("consolas", 10), wrap="none", borderwidth=3, relief="sunken")

        ##### Text Header Scroll bars ######
        lfxscrollbar = ttk.Scrollbar(self.printframe, command=file_hed.xview, orient = tk.HORIZONTAL)
        lfyscrollbar = ttk.Scrollbar(self.printframe, command=file_hed.yview, orient = tk.VERTICAL)
        lfxscrollbar.grid(row=1, column=0,sticky='ew')
        lfyscrollbar.grid(row=0, column=1,sticky='ns')

        file_hed.configure(xscrollcommand = lfxscrollbar.set)
        file_hed.configure(yscrollcommand = lfyscrollbar.set)
        
        if self.hedrtype==2:
            ##### insert trace header file to floating frame  ####
            file_hed.insert(tk.END,'\n'+'\n')
            file_hed.insert(tk.END,'{}'.format(self.ttitle1)+'\n'+'\n')
            file_hed.insert(tk.END, self.trhed_table+'\n'+'\n')  
        else:   
            ##### insert binary header to floating frame  ####
            file_hed.insert(tk.END,'{}'.format(self.htitle2)+'\n'+'\n')
            for k, v in self.bin_hed.items():
                keys = str(k)
                value = str(v)
    #                print('{:<32}: {}'.format(keys,value))
                file_hed.insert(tk.END, '\t{:<32}: {}'.format(keys,value)+'\n' )
            
            ##### insert text header to floating frame  ####
            file_hed.insert(tk.END,'\n'+'\n')
            file_hed.insert(tk.END,'{}'.format(self.htitle1)+'\n'+'\n')
            file_hed.insert(tk.END, self.txt_hed+'\n'+'\n')
        

        save_button = tk.Button(self.printframe, text="Save Table", command=lambda: headers.save_text(self,file_hed))
        save_button.grid(row = 2, column = 0, )     
        
        tk.Misc.lift(self.hedwindow)

def file_headers(self):
    '''  Open the segy file and print binary and text headers. 
    Uses segyio library. 
    txt_hed is a formatted ascii file greated by segyio - text header section
    bin_hed is the binary headers generated by segyio, formatted as a dictionary
    
    '''
    import segyio

    with segyio.open(self.segy, ignore_geometry=True) as f:
        self.txt_hed = segyio.tools.wrap(f.text[0]) # [1...] are extended headers
        self.bin_hed = f.bin           # this is a dictionary with keys and values

    return self.txt_hed, self.bin_hed

def file_heads(self,root):
    '''read the binary and text headers
    Save a table and pass to print_headers
    '''
    from timepick import headers
    # generate a text file and a python dictionary
    headers.file_headers(self)
    self.htitle1 = 'Text Header'
    self.htitle2 = 'Binary Header'
    self.hedrtype=1
    # set up a parqmeter grid and execute
    headers.headers_frame(self,root)

def trc_heads(self,root):
    '''read the binary and text headers
    Save a table and pass to print_headers
    '''
    from timepick import headers
    import iovsp.text_io as text_io

    #headers.trace_headers(self)
    self.trhed_table = text_io.header_table(self.headers,self.headers.shape[1])

    self.ttitle1 = 'Trace Header Table'
    self.hedrtype=2
    # set up a parqmeter grid and execute
    headers.headers_frame(self,root)

def save_text(self,text_win):
    ''' save text from tkinter text box as an ascii file
    ''' 
    from tkinter import filedialog as fd

    # from the text window, extract the text header after edit
    filetext = text_win.get("1.0", "end-1c")

    # use a windows dialog box to set the output path and file name
    file_path=fd.asksaveasfilename(initialdir = "c:\\Users\\acampbell45\\Documents",
                                   defaultextension=".txt",
                                    title = "Save Text file",
                                    filetypes = (("text files","*.txt"),("all files","*.*")))

    if file_path:
        with open(file_path, "w") as f:
            f.write(filetext)
    # close the text frame after saving a file
    self.hedwindow.destroy()
    #self.new_txt_hdr=filetext


